{"code":"var validatePolish = {\r\n    checksum: function (number, weights) {\r\n        var max = number.length - 1;\r\n        var sum = 0;\r\n        for (var i = 0; i < max; i++) {\r\n            var n = parseInt(number[i], 10);\r\n            sum += n * weights[i];\r\n        }\r\n        var resultSum = sum % 11 !== 10 ? sum % 11 : 0;\r\n        var lastDigit = parseInt(number.slice(-1), 10);\r\n        return resultSum === lastDigit;\r\n    },\r\n    /**\r\n     * Validation of PESEL.\r\n     * @param {string} pesel\r\n     * @returns {boolean}\r\n     */\r\n    pesel: function (pesel) {\r\n        if (!/^[0-9]{11}$/.test(pesel)) {\r\n            return false;\r\n        }\r\n        var times = [1, 3, 7, 9];\r\n        var digits = (\"\" + pesel).split('').map(function (digit) { return parseInt(digit, 10); });\r\n        var dig11 = digits.splice(-1)[0];\r\n        var control = digits.reduce(function (previousValue, currentValue, index) { return previousValue + currentValue * times[index % 4]; }) % 10;\r\n        return 10 - (control === 0 ? 10 : control) === dig11;\r\n    },\r\n    /**\r\n     * Validation of NIP.\r\n     * @param {*} nip\r\n     * @returns {boolean}\r\n     */\r\n    nip: function (nip) {\r\n        if (typeof nip !== 'string') {\r\n            return false;\r\n        }\r\n        var nipWithoutDashes = nip.replace(/-/g, '');\r\n        var reg = /^[0-9]{10}$/;\r\n        if (reg.test(nipWithoutDashes) === false) {\r\n            return false;\r\n        }\r\n        var dig = ('' + nipWithoutDashes).split('');\r\n        var control = (6 * parseInt(dig[0], 10) +\r\n            5 * parseInt(dig[1], 10) +\r\n            7 * parseInt(dig[2], 10) +\r\n            2 * parseInt(dig[3], 10) +\r\n            3 * parseInt(dig[4], 10) +\r\n            4 * parseInt(dig[5], 10) +\r\n            5 * parseInt(dig[6], 10) +\r\n            6 * parseInt(dig[7], 10) +\r\n            7 * parseInt(dig[8], 10)) %\r\n            11;\r\n        if (parseInt(dig[9], 10) === control) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * Validation of REGON.\r\n     * @param {string} regon\r\n     * @returns {boolean}\r\n     */\r\n    regon: function (regon) {\r\n        var reg = /^[0-9]{9,14}$/;\r\n        if (reg.test(regon) === false) {\r\n            return false;\r\n        }\r\n        var weights9 = [8, 9, 2, 3, 4, 5, 6, 7];\r\n        if (regon.length === 9) {\r\n            return validatePolish.checksum(regon, weights9);\r\n        }\r\n        var weights14 = [2, 4, 8, 5, 0, 9, 7, 3, 6, 1, 2, 4, 8];\r\n        return validatePolish.checksum(regon.slice(0, 9), weights9) && validatePolish.checksum(regon, weights14);\r\n    },\r\n    /**\r\n     * Validation of identity card.\r\n     * @param {*} num\r\n     * @returns {boolean}\r\n     */\r\n    identityCard: function (num) {\r\n        // Check length\r\n        if (!num || num.length !== 9) {\r\n            return false;\r\n        }\r\n        var upperNum = num.toUpperCase();\r\n        var letterValues = [\r\n            '0',\r\n            '1',\r\n            '2',\r\n            '3',\r\n            '4',\r\n            '5',\r\n            '6',\r\n            '7',\r\n            '8',\r\n            '9',\r\n            'A',\r\n            'B',\r\n            'C',\r\n            'D',\r\n            'E',\r\n            'F',\r\n            'G',\r\n            'H',\r\n            'I',\r\n            'J',\r\n            'K',\r\n            'L',\r\n            'M',\r\n            'N',\r\n            'O',\r\n            'P',\r\n            'Q',\r\n            'R',\r\n            'S',\r\n            'T',\r\n            'U',\r\n            'V',\r\n            'W',\r\n            'X',\r\n            'Y',\r\n            'Z',\r\n        ];\r\n        var getLetterValue = function (letter) {\r\n            for (var j = 0, max = letterValues.length; j < max; j++) {\r\n                if (letter === letterValues[j]) {\r\n                    return j;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n        // check series\r\n        for (var i = 0; i < 3; i++) {\r\n            if (getLetterValue(upperNum[i]) < 10) {\r\n                return false;\r\n            }\r\n        }\r\n        // check number\r\n        for (var i = 3; i < 9; i++) {\r\n            if (getLetterValue(upperNum[i]) < 0 || getLetterValue(upperNum[i]) > 9) {\r\n                return false;\r\n            }\r\n        }\r\n        // checksum\r\n        var sum = 7 * getLetterValue(upperNum[0]) +\r\n            3 * getLetterValue(upperNum[1]) +\r\n            1 * getLetterValue(upperNum[2]) +\r\n            7 * getLetterValue(upperNum[4]) +\r\n            3 * getLetterValue(upperNum[5]) +\r\n            1 * getLetterValue(upperNum[6]) +\r\n            7 * getLetterValue(upperNum[7]) +\r\n            3 * getLetterValue(upperNum[8]);\r\n        sum %= 10;\r\n        if (sum !== getLetterValue(upperNum[3])) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    /**\r\n     * Checks if given number of identity card is valid.\r\n     * @param {string} num - series and number of identity card to validate\r\n     * @return {boolean} - true if identity card is valid, false if invalid\r\n     */\r\n    identityCardWithSeparator: function (num) {\r\n        // check length\r\n        if (!num || num.length !== 10) {\r\n            return false;\r\n        }\r\n        // check separator\r\n        if (num[3] !== ' ' && num[3] !== '-') {\r\n            return false;\r\n        }\r\n        return this.identityCard(num.replace(/[\\s-]/g, ''));\r\n    },\r\n};\r\nif (window) {\r\n    window.validatePolish = validatePolish;\r\n}\r\nexport { validatePolish };\r\nexport default validatePolish;\r\n","references":[],"dts":{"name":"/home/radrat/workspace/radarsu-pnpm/@/any/validate-polish/index.d.ts","writeByteOrderMark":false,"text":"declare const validatePolish: {\r\n    checksum: (number: string, weights: number[]) => boolean;\r\n    /**\r\n     * Validation of PESEL.\r\n     * @param {string} pesel\r\n     * @returns {boolean}\r\n     */\r\n    pesel(pesel: string): boolean;\r\n    /**\r\n     * Validation of NIP.\r\n     * @param {*} nip\r\n     * @returns {boolean}\r\n     */\r\n    nip(nip: string): boolean;\r\n    /**\r\n     * Validation of REGON.\r\n     * @param {string} regon\r\n     * @returns {boolean}\r\n     */\r\n    regon(regon: string): boolean;\r\n    /**\r\n     * Validation of identity card.\r\n     * @param {*} num\r\n     * @returns {boolean}\r\n     */\r\n    identityCard(num: string): boolean;\r\n    /**\r\n     * Checks if given number of identity card is valid.\r\n     * @param {string} num - series and number of identity card to validate\r\n     * @return {boolean} - true if identity card is valid, false if invalid\r\n     */\r\n    identityCardWithSeparator(num: string): boolean;\r\n};\r\nexport { validatePolish };\r\nexport default validatePolish;\r\n"}}
